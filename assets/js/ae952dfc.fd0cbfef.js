"use strict";(self.webpackChunkopenmetal_docs=self.webpackChunkopenmetal_docs||[]).push([[8624],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(f,l(l({ref:t},p),{},{components:a})):n.createElement(f,l({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},49325:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:8},l="Create an HTTPS-Terminated Load Balancer",i={unversionedId:"tutorials/https-loadbalancer",id:"tutorials/https-loadbalancer",title:"Create an HTTPS-Terminated Load Balancer",description:"This guide covers the steps needed to create an HTTPS-terminated load balancer",source:"@site/docs/tutorials/https-loadbalancer.md",sourceDirName:"tutorials",slug:"/tutorials/https-loadbalancer",permalink:"/docs/manuals/tutorials/https-loadbalancer",draft:!1,editUrl:"https://github.com/openmetalio/openmetal-docs/blob/main/docs/tutorials/https-loadbalancer.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Create EC2 Credentials for Swift S3 API Access",permalink:"/docs/manuals/openstack-admin/access-swift-s3-api"},next:{title:"How to Configure and Use AWS Client for Swift S3 API Access on OpenMetal",permalink:"/docs/manuals/openstack-admin/use-aws-client-to-access-swift-s3-api"}},s={},c=[{value:"Initial Preparation",id:"initial-preparation",level:2},{value:"Procedure",id:"procedure",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-an-https-terminated-load-balancer"},"Create an HTTPS-Terminated Load Balancer"),(0,r.kt)("p",null,"This guide covers the steps needed to create an HTTPS-terminated load balancer\nusing the command line."),(0,r.kt)("p",null,"This guide applies to OpenMetal clouds running OpenStack Yoga with Barbican enabled."),(0,r.kt)("p",null,"Before starting there are few things to prepare:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A Python ",(0,r.kt)("a",{parentName:"li",href:"/docs/manuals/operators-manual/day-1/command-line/openstackclient"},"virtual environment with OpenStackClient installed")),(0,r.kt)("li",{parentName:"ul"},"Obtain a TLS certificate from an external certficate authority"),(0,r.kt)("li",{parentName:"ul"},"Create 2 VMs, ensuring they are on the same network.")),(0,r.kt)("p",null,"Two VMs have been created on a network called ",(0,r.kt)("inlineCode",{parentName:"p"},"private_net_1"),", reachable by\n",(0,r.kt)("inlineCode",{parentName:"p"},"10.0.0.57")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"10.0.0.250"),". NGINX has been installed to each and is listening\non port 80. Security groups for ICMP and HTTP have been added to each VM. A TLS\ncertificate from an external certificate authority has been acquired."),(0,r.kt)("h2",{id:"initial-preparation"},"Initial Preparation"),(0,r.kt)("p",null,"In your virtual environment, install the ",(0,r.kt)("inlineCode",{parentName:"p"},"stable/yoga")," branch of ",(0,r.kt)("inlineCode",{parentName:"p"},"python-octaviaclient"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"pip install git+https://github.com/openstack/python-octaviaclient@stable/yoga\n")),(0,r.kt)("p",null,"The CA certificate chain, TLS certificate, and private key are layed out in a\ndirectory like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ ls cert\nca-certs.pem  server.crt  server.key\n")),(0,r.kt)("h2",{id:"procedure"},"Procedure"),(0,r.kt)("p",null,"Create a copy of the certificate in PKCS#12 format using ",(0,r.kt)("inlineCode",{parentName:"p"},"openssl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openssl \\\n  pkcs12 -export \\\n  -inkey server.key \\\n  -in server.crt \\\n  -certfile ca-chain.crt \\\n  -passout pass: \\\n  -out server.p12\n")),(0,r.kt)("p",null,"Store the SSL certificate as a secret using Barbican:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openstack secret store \\\n  --name='tls_secret1' \\\n  -t 'application/octet-stream' \\\n  -e 'base64' \\\n  --payload=\"$(base64 < server.p12)\"\n")),(0,r.kt)("p",null,"Create the load balancer and ensure it is on the same network as your VMs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openstack loadbalancer create \\\n  --name lb1 \\\n  --vip-subnet-id private_net_1\n")),(0,r.kt)("p",null,"Create a listener with protocol ",(0,r.kt)("inlineCode",{parentName:"p"},"TERMINATED_HTTPS"),", listening on port ",(0,r.kt)("inlineCode",{parentName:"p"},"443"),",\nusing the certificate secret uploaded earlier:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openstack loadbalancer listener create \\\n  lb1 \\\n  --protocol TERMINATED_HTTPS \\\n  --protocol-port 443 \\\n  --name listener1 \\\n  --default-tls-container-ref $(openstack secret list | awk '/ tls1 / {print $2}')\n")),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"ROUND_ROBIN")," pool using the ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP")," protocol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openstack loadbalancer pool create \\\n  --name pool1 \\\n  --lb-algorithm ROUND_ROBIN \\\n  --listener listener1 \\\n  --protocol HTTP\n")),(0,r.kt)("p",null,"Create 2 members using the appropriate IPs for your VMs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openstack loadbalancer member create \\\n  --subnet-id private_net_1 \\\n  --address 10.0.0.250 \\\n  --protocol-port 80 \\\n  pool1\nopenstack loadbalancer member create \\\n  --subnet-id private_net_1 \\\n  --address 10.0.0.57 \\\n  --protocol-port 80 \\\n  pool1\n")),(0,r.kt)("p",null,"Associate a floating IP to the VIP address of the load balancer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"openstack floating ip set --port d77f97aa-9d33-40c1-b191-1ca549a95075 173.231.202.91\n")),(0,r.kt)("p",null,"Show the details of the load balancer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ openstack loadbalancer show lb1\n+---------------------+--------------------------------------+\n| Field               | Value                                |\n+---------------------+--------------------------------------+\n| admin_state_up      | True                                 |\n| availability_zone   | None                                 |\n| created_at          | 2023-10-10T14:41:53                  |\n| description         |                                      |\n| flavor_id           | None                                 |\n| id                  | 5028cbc9-1c72-4873-b423-ffcb1c2f1887 |\n| listeners           | 75e82ae6-f1a4-43e3-a7ea-9909afc5ae59 |\n| name                | lb1                                  |\n| operating_status    | ONLINE                               |\n| pools               | 6ae46b29-0d27-45f5-9d8e-23e2ef82fe84 |\n| project_id          | 4993ac59480646b6b15ae7727279ca11     |\n| provider            | amphora                              |\n| provisioning_status | ACTIVE                               |\n| updated_at          | 2023-10-10T18:22:46                  |\n| vip_address         | 10.0.0.132                           |\n| vip_network_id      | 0d23b204-993b-4876-8604-a4d0ec76e6ad |\n| vip_port_id         | d77f97aa-9d33-40c1-b191-1ca549a95075 |\n| vip_qos_policy_id   | None                                 |\n| vip_subnet_id       | ad266069-6fa0-4c4d-830d-5d5b913279e2 |\n| tags                |                                      |\n+---------------------+--------------------------------------+\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Update the DNS for your FQDN to point to the floating IP address and verify the\nload balancer works as expected."))}d.isMDXComponent=!0}}]);