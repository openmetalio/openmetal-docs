"use strict";(self.webpackChunkopenmetal_docs=self.webpackChunkopenmetal_docs||[]).push([[7280],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},o="OpenMetal Infrastructure Explained",i={unversionedId:"baremetal/tutorials/baremetal-networking",id:"baremetal/tutorials/baremetal-networking",title:"OpenMetal Infrastructure Explained",description:"Author: Jacob Hipps & Ramon Grullon",source:"@site/docs/baremetal/tutorials/baremetal-networking.md",sourceDirName:"baremetal/tutorials",slug:"/baremetal/tutorials/baremetal-networking",permalink:"/docs/manuals/baremetal/tutorials/baremetal-networking",draft:!1,editUrl:"https://github.com/openmetalio/openmetal-docs/blob/main/docs/baremetal/tutorials/baremetal-networking.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to access the IPMI KVM console",permalink:"/docs/manuals/baremetal/tutorials/access-ipmi-kvm"},next:{title:"OpenStack Operator's Manual - Private Cloud Core",permalink:"/docs/manuals/operators-manual/"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Physical Network Layout",id:"physical-network-layout",level:3},{value:"Notes and Reminders",id:"notes-and-reminders",level:3},{value:"Use Case",id:"use-case",level:2},{value:"Option 1: Manual (Linux CLI)",id:"option-1-manual-linux-cli",level:2},{value:"Option 2: Using NetworkManager (RHEL/CentOS)",id:"option-2-using-networkmanager-rhelcentos",level:2},{value:"Option 3: Netplan (Ubuntu)",id:"option-3-netplan-ubuntu",level:2}],u={toc:p};function d(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"openmetal-infrastructure-explained"},"OpenMetal Infrastructure Explained"),(0,r.kt)("p",null,"Author: Jacob Hipps & Ramon Grullon"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"At OpenMetal, all bare metal nodes come preconfigured with bonded network\ninterfaces using LACP (802.3ad). This setup forms a ",(0,r.kt)("inlineCode",{parentName:"p"},"bond0")," interface\ncombining two physical NICs, giving your server both redundancy and\nadditional bandwidth."),(0,r.kt)("p",null,"Every switchport connected to your node is configured as a ",(0,r.kt)("strong",{parentName:"p"},"trunk port"),",\nallowing multiple VLANs to pass through. This makes it easy to layer\nadditional VLANs on top of the existing bond interface without needing\nphysical changes."),(0,r.kt)("p",null,"Some VLANs, such as the \u201cInventory\u201d (",(0,r.kt)("inlineCode",{parentName:"p"},"bond0.1001"),") and \u201cProvider\u201d\n(",(0,r.kt)("inlineCode",{parentName:"p"},"bond0.1006"),"), are ",(0,r.kt)("strong",{parentName:"p"},"routed VLANs"),". These are backed by virtual interfaces on\nOpenMetal\u2019s core switches and use ",(0,r.kt)("strong",{parentName:"p"},"VRRP")," (Virtual Router Redundancy Protocol)\nfor high availability."),(0,r.kt)("p",null,"Because of this, routed VLANs will always consume ",(0,r.kt)("strong",{parentName:"p"},"five reserved IPs")," from\neach prefix:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"1 IP")," for the VRRP gateway address"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"2 IPs")," for the core switches"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"1 IP")," for the network address"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"1 IP")," for the broadcast address")),(0,r.kt)("p",null,"For example, in a ",(0,r.kt)("inlineCode",{parentName:"p"},"/28")," block (",(0,r.kt)("inlineCode",{parentName:"p"},"1.2.3.0/28"),"):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"IP Address"),(0,r.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.2.3.0"),(0,r.kt)("td",{parentName:"tr",align:null},"Network address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.2.3.1"),(0,r.kt)("td",{parentName:"tr",align:null},"VRRP gateway")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.2.3.2"),(0,r.kt)("td",{parentName:"tr",align:null},"Core switch 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.2.3.3"),(0,r.kt)("td",{parentName:"tr",align:null},"Core switch 2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.2.3.4\u20131.2.3.14"),(0,r.kt)("td",{parentName:"tr",align:null},"Usable IPs for devices")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.2.3.15"),(0,r.kt)("td",{parentName:"tr",align:null},"Broadcast address")))),(0,r.kt)("p",null,"You can view your cluster\u2019s assigned VLANs and IP prefixes in",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Central \u2192 Assets \u2192 Networking"),"."),(0,r.kt)("p",null,"How-to guide on creating VLANs and IP prefixes in your Central Dashboard\n-",(0,r.kt)("a",{parentName:"p",href:"https://openmetal.io/docs/manuals/openmetal-central/adding-ip-addresses"},"OpenMetal VLAN Guide")),(0,r.kt)("h3",{id:"physical-network-layout"},"Physical Network Layout"),(0,r.kt)("p",null,'Our pod networks use a collapsed core topology with n+1 redundancy at each level.\nBlade server chassis act like their own "rack" in terms of network layout, and\nare directly connected to the core. Top-of-rack (ToR) switches each connect\nupwards to the core, and between themselves.'),(0,r.kt)("p",null,"Small, Standard, and GPU servers are blade-type servers. All other server types\nconnect via the ToR switches."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Network Diagram",src:n(21543).Z,width:"1238",height:"1530"})),(0,r.kt)("h3",{id:"notes-and-reminders"},"Notes and Reminders"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"VLANs must be provisioned in ",(0,r.kt)("strong",{parentName:"li"},"OpenMetal Central")," before use."),(0,r.kt)("li",{parentName:"ul"},"Only VLANs assigned to your cluster will pass through trunked interfaces."),(0,r.kt)("li",{parentName:"ul"},"If you need help provisioning a VLAN, OpenMetal support team can assist.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"use-case"},"Use Case"),(0,r.kt)("p",null,"You\u2019ve added a new VLAN to your project via OpenMetal Central",(0,r.kt)("br",{parentName:"p"}),"\n","(e.g., VLAN ID ",(0,r.kt)("inlineCode",{parentName:"p"},"1993")," with IP range ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.10.0/24"),") and want to configure",(0,r.kt)("br",{parentName:"p"}),"\n","it on an existing node. Since ",(0,r.kt)("inlineCode",{parentName:"p"},"bond0")," is already in place, you\u2019ll simply",(0,r.kt)("br",{parentName:"p"}),"\n","attach the new VLAN as a subinterface."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"option-1-manual-linux-cli"},"Option 1: Manual (Linux CLI)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ip link add link bond0 name bond0.1993 type vlan id 1993\nip addr add 192.168.10.5/24 dev bond0.1993\nip link set bond0.1993 up\n")),(0,r.kt)("p",null,"If a gateway is needed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ip route add default via 192.168.10.1\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"option-2-using-networkmanager-rhelcentos"},"Option 2: Using NetworkManager (RHEL/CentOS)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nmcli con add type vlan dev bond0 id 1993 \\\n  ifname bond0.1993 con-name vlan-custom \\\n  mtu 1500 ipv4.method manual \\\n  ipv4.addresses 192.168.10.5/24\n")),(0,r.kt)("p",null,"Add gateway and DNS (if needed):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'nmcli con mod vlan-custom ipv4.gateway 192.168.10.1\nnmcli con mod vlan-custom ipv4.dns "1.1.1.1,8.8.8.8"\n')),(0,r.kt)("p",null,"Activate the new connection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nmcli con up vlan-custom\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"option-3-netplan-ubuntu"},"Option 3: Netplan (Ubuntu)"),(0,r.kt)("p",null,"Edit your Netplan config file (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/netplan/50-cloud-init.yaml"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"network:\n  version: 2\n  vlans:\n    bond0.1993:\n      id: 1993\n      link: bond0\n      addresses: [192.168.10.5/24]\n      gateway4: 192.168.10.1\n      nameservers:\n        addresses: [1.1.1.1, 8.8.8.8]\n")),(0,r.kt)("p",null,"Apply the configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"netplan apply\n")),(0,r.kt)("p",null,"Verify VLAN Connectivity\nOnce the VLAN subinterface is configured and brought up, verify connectivity\nfrom a remote host that can reach the same VLAN."),(0,r.kt)("p",null,"From another host on the same VLAN or with routing to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ping 192.168.10.5\n")),(0,r.kt)("p",null,"If you receive responses, the configuration is working as expected."),(0,r.kt)("p",null,"If pings fail, verify the VLAN is assigned in Central and that firewalls or\nsecurity groups aren\u2019t blocking ICMP."))}d.isMDXComponent=!0},21543:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/network_config-c476bb1aca7d04212d44449b8e092b74.png"}}]);