"use strict";(self.webpackChunkopenmetal_docs=self.webpackChunkopenmetal_docs||[]).push([[8789],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},87097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},i="Understanding & Breaking Ceph Parent Child Dependencies",o={unversionedId:"tutorials/ceph-dependencies",id:"tutorials/ceph-dependencies",title:"Understanding & Breaking Ceph Parent Child Dependencies",description:"Author: Ramon Grullon",source:"@site/docs/tutorials/ceph-dependencies.md",sourceDirName:"tutorials",slug:"/tutorials/ceph-dependencies",permalink:"/docs/manuals/tutorials/ceph-dependencies",draft:!1,editUrl:"https://github.com/openmetalio/openmetal-docs/blob/main/docs/tutorials/ceph-dependencies.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Backup VM Data to Ceph with Swift S3API",permalink:"/docs/manuals/tutorials/backup-vm-data-to-ceph-with-swift-s3api"},next:{title:"Create a Site-to-Site VPN Connection with Endpoint Groups in Horizon",permalink:"/docs/manuals/tutorials/create-site-to-site-vpn-in-horizon"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"What Creates a Parent\u2013Child Dependency?",id:"what-creates-a-parentchild-dependency",level:2},{value:"Why Dependencies Matter",id:"why-dependencies-matter",level:2},{value:"Identifying Parent\u2013Child Chains",id:"identifying-parentchild-chains",level:2},{value:"Using rbd flatten",id:"using-rbd-flatten",level:2},{value:"Step\u2011by\u2011Step Example",id:"stepbystep-example",level:3},{value:"Space &amp; Performance Considerations",id:"space--performance-considerations",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Additional Resources",id:"additional-resources",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"understanding--breaking-ceph-parent-child-dependencies"},"Understanding & Breaking Ceph Parent Child Dependencies"),(0,r.kt)("p",null,"Author: Ramon Grullon"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"In Ceph\xa0RADOS\xa0Block\xa0Device (RBD), snapshots and clones create ",(0,r.kt)("strong",{parentName:"p"},"parent\u2013child\nrelationships")," that let you roll back data or rapidly provision new volumes.\nWhile powerful, these dependencies can also lock images in place\u2014preventing\ndeletions or migrations until the chain is broken.\xa0This guide explains how the\nrelationships are formed, why they matter, and how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"rbd flatten")," to make\na clone fully independent."),(0,r.kt)("h2",{id:"what-creates-a-parentchild-dependency"},"What Creates a Parent\u2013Child Dependency?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Snapshot\xa0\u2192 Image"),"\xa0\u2014 Creating a snapshot of an RBD image establishes a\nparent (the pre\u2011snapshot image) and a child (the snapshot)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Snapshot\xa0\u2192 Clone"),"\xa0\u2014 Creating a clone from a snapshot forms a second level\nof dependency: the new image (clone) relies on its snapshot parent, which in\nturn relies on the original image.")),(0,r.kt)("p",null,"Each child stores only the changed blocks, so space use is minimal\u2014until the\nparent needs to be removed."),(0,r.kt)("h2",{id:"why-dependencies-matter"},"Why Dependencies Matter"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Garbage collection"),"\xa0\u2014 Parents with children cannot be deleted, causing\nstale images to linger in the pool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Disaster recovery"),"\xa0\u2014 Restoring or migrating a chain of dependent images is\nslower and more error\u2011prone.")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Breaking the chain by flattening makes each image self\u2011contained at"),"\n",(0,r.kt)("strong",{parentName:"p"},"the coast of extra space. Be mindful of your storage levels."))),(0,r.kt)("h2",{id:"identifying-parentchild-chains"},"Identifying Parent\u2013Child Chains"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# List snapshots for an image\nrbd snap ls pool_name/image_name\n\n# Show children of a snapshot\nrbd children volumes/volume-UUID\n\n# Display the parent of a cloned image\nrbd info vms/vm-clone-001 | grep parent\n")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"rbd children")," reports one or more clones, you\u2019ll need to flatten them before\nyou can remove the snapshot or its parent image."),(0,r.kt)("h2",{id:"using-rbd-flatten"},"Using rbd flatten"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rbd flatten")," copies all referenced blocks into the child image so\nit no longer needs its parent. The command syntax is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rbd flatten <pool>/<image>\n")),(0,r.kt)("h3",{id:"stepbystep-example"},"Step\u2011by\u2011Step Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# 1\xa0Check dependency\nrbd children volumes/volume-UUID\nvolumes/volume-UUID\n\n# 2\xa0Start the flatten task\nrbd flatten volumes/volume-UUID\n\n# 3\xa0Monitor progress (Ceph\xa0Nautilus+)\nrbd task ls | grep flatten\n\n# 4\xa0Confirm the clone is now independent\nrbd info volumes/volume-UUID | grep parent   # (no output)\n")),(0,r.kt)("p",null,"Repeat until no dependencies exist"),(0,r.kt)("h2",{id:"space--performance-considerations"},"Space & Performance Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Storage overhead"),"\xa0\u2014 After flattening, each clone occupies the full logical\nsize it actively uses. Plan pool capacity accordingly."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cluster load"),"\xa0\u2014 Flatten operations are I/O\u2011intensive.\xa0Schedule them during\noff\u2011peak hours preferably.")),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Symptom"),(0,r.kt)("th",{parentName:"tr",align:null},"Resolution"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Image has snapshots or clones - not removing")),(0,r.kt)("td",{parentName:"tr",align:null},"Flatten or delete all children first")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rbd: error: Operation in progress")),(0,r.kt)("td",{parentName:"tr",align:null},"Check ",(0,r.kt)("inlineCode",{parentName:"td"},"rbd task ls"),"; wait or cancel conflicting")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Flatten stalls at 0\xa0%"),(0,r.kt)("td",{parentName:"tr",align:null},"Ensure the OSDs hosting the parent are healthy")))),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Keep your gold\xa0images small\u2014install only the base OS to minimize flatten\ntime."),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"layered clones")," for short\u2011lived workloads (CI jobs, test VMs) and\nflatten only when the volume will persist long term.")),(0,r.kt)("h2",{id:"additional-resources"},"Additional Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.ceph.com/en/latest/rbd/rbd/"},"Ceph\xa0Documentation\xa0\u203a RBD Commands")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"man rbd"))))}c.isMDXComponent=!0}}]);