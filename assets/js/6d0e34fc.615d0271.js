"use strict";(self.webpackChunkopenmetal_docs=self.webpackChunkopenmetal_docs||[]).push([[3276],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},43237:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={slug:"/private-ai/engineering-notes/sr-iov-and-mig",description:"Understand how to enable SR-IOV and configure NVIDIA Multi-Instance GPU (MIG) mode on A100 for secure and isolated GPU partitioning.",sidebar_position:3},s="SR-IOV and Multi-Instance GPU (MIG) Setup for A100 in Private Cloud",o={unversionedId:"private-ai/engineering-notes/sr-iov-and-mig",id:"private-ai/engineering-notes/sr-iov-and-mig",title:"SR-IOV and Multi-Instance GPU (MIG) Setup for A100 in Private Cloud",description:"Understand how to enable SR-IOV and configure NVIDIA Multi-Instance GPU (MIG) mode on A100 for secure and isolated GPU partitioning.",source:"@site/docs/private-ai/engineering-notes/sr-iov-and-mig.md",sourceDirName:"private-ai/engineering-notes",slug:"/private-ai/engineering-notes/sr-iov-and-mig",permalink:"/docs/manuals/private-ai/engineering-notes/sr-iov-and-mig",draft:!1,editUrl:"https://github.com/openmetalio/openmetal-docs/blob/main/docs/private-ai/engineering-notes/sr-iov-and-mig.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/private-ai/engineering-notes/sr-iov-and-mig",description:"Understand how to enable SR-IOV and configure NVIDIA Multi-Instance GPU (MIG) mode on A100 for secure and isolated GPU partitioning.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"NVIDIA Driver Installation and Verification for A100 GPUs",permalink:"/docs/manuals/private-ai/engineering-notes/nvidia-driver-installation"},next:{title:"Configuring MIG Profiles and Launching VMs with OpenStack",permalink:"/docs/manuals/private-ai/engineering-notes/configuring-mig-and-vms-openstack"}},l={},p=[{value:"What Is SR-IOV?",id:"what-is-sr-iov",level:2},{value:"What Is MIG?",id:"what-is-mig",level:2},{value:"Enabling MIG Mode",id:"enabling-mig-mode",level:2},{value:"Creating MIG Instances",id:"creating-mig-instances",level:2},{value:"Considerations for OpenStack Integration",id:"considerations-for-openstack-integration",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Next Steps",id:"next-steps",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sr-iov-and-multi-instance-gpu-mig-setup-for-a100-in-private-cloud"},"SR-IOV and Multi-Instance GPU (MIG) Setup for A100 in Private Cloud"),(0,i.kt)("p",null,"Modern GPU workloads benefit from hardware partitioning that enables multiple\nworkloads or tenants to share a physical GPU securely. The A100 GPU from NVIDIA\nsupports both Single Root I/O Virtualization (SR-IOV) and Multi-Instance GPU\n(MIG). This article outlines how to configure these features for use in a private\ncloud environment running OpenStack."),(0,i.kt)("h2",{id:"what-is-sr-iov"},"What Is SR-IOV?"),(0,i.kt)("p",null,"SR-IOV allows a single physical PCIe device to expose multiple Virtual Functions\n(VFs). Each VF operates as an independent device with direct I/O access. When\napplied to GPUs, SR-IOV enables virtual machines (VMs) to access GPU resources\nefficiently without emulation."),(0,i.kt)("p",null,"To enable SR-IOV on a system with an A100 GPU:"),(0,i.kt)("p",null,"Step 1: Verify BIOS/UEFI settings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Enable ",(0,i.kt)("strong",{parentName:"li"},"SR-IOV")),(0,i.kt)("li",{parentName:"ul"},"Enable ",(0,i.kt)("strong",{parentName:"li"},"VT-d")," (Intel) or ",(0,i.kt)("strong",{parentName:"li"},"AMD-Vi/IOMMU")," (AMD)")),(0,i.kt)("p",null,"Step 2: Enable virtual functions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo 1 > /sys/bus/pci/devices/0000:81:00.0/sriov_numvfs\n")),(0,i.kt)("p",null,"Step 3: Confirm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"lspci -nn | grep -i nvidia\n")),(0,i.kt)("p",null,"This exposes VFs on the GPU that can be passed through to virtual machines via\nOpenStack Nova or other virtualization layers."),(0,i.kt)("h2",{id:"what-is-mig"},"What Is MIG?"),(0,i.kt)("p",null,"MIG enables partitioning a single A100 GPU into multiple hardware-isolated GPU\ninstances. Each instance has its own:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Dedicated streaming multiprocessors (SMs)"),(0,i.kt)("li",{parentName:"ul"},"Isolated L2 cache and memory bandwidth"),(0,i.kt)("li",{parentName:"ul"},"Fault-isolated execution path")),(0,i.kt)("p",null,"This ensures predictable performance and fault isolation across workloads,\nmaking MIG suitable for secure multi-tenant environments or parallel AI\ninference tasks."),(0,i.kt)("p",null,"Each A100 GPU can support up to seven 1g.5gb MIG instances, depending on the\nprofile used."),(0,i.kt)("h2",{id:"enabling-mig-mode"},"Enabling MIG Mode"),(0,i.kt)("p",null,"Enable MIG mode on the GPU using nvidia-smi:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nvidia-smi -i 0 -mig 1\n")),(0,i.kt)("p",null,"You can verify the change with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nvidia-smi -i 0 --query-gpu=mig.mode.current --format=csv\n")),(0,i.kt)("p",null,"MIG must be enabled on each GPU individually. On Ampere architecture GPUs, this\nsetting is persistent across reboots."),(0,i.kt)("h2",{id:"creating-mig-instances"},"Creating MIG Instances"),(0,i.kt)("p",null,"To allocate GPU slices for specific workloads, create MIG profiles using the\nfollowing command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nvidia-smi mig -cgi 19 -C\n")),(0,i.kt)("p",null,"This command creates a GPU instance using profile ID ",(0,i.kt)("inlineCode",{parentName:"p"},"19"),", which corresponds to\nthe ",(0,i.kt)("strong",{parentName:"p"},"MIG 1g.5gb")," profile on A100 (1/8 memory and 1/7 SMs). Other profile IDs support\nlarger memory and compute slices."),(0,i.kt)("p",null,"List the available profiles with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nvidia-smi mig -lgip\n")),(0,i.kt)("p",null,"And verify created instances:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nvidia-smi mig -lgi\n")),(0,i.kt)("p",null,"Each MIG instance can be treated like a separate GPU device. These instances are\nusable by containers, VMs, or native applications through the standard CUDA interface."),(0,i.kt)("h2",{id:"considerations-for-openstack-integration"},"Considerations for OpenStack Integration"),(0,i.kt)("p",null,"In OpenStack Nova, MIG profiles can be exposed as ",(0,i.kt)("strong",{parentName:"p"},"mediated devices (mdev)"),". This\nallows them to be scheduled and assigned through Nova flavors. To enable this:"),(0,i.kt)("p",null,"Configure ",(0,i.kt)("inlineCode",{parentName:"p"},"nova.conf"),":"),(0,i.kt)("p",null,"Step 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[devices]\nenabled_mdev_types = nvidia-476\n")),(0,i.kt)("p",null,"Step 2:\nRestart the nova-compute service."),(0,i.kt)("p",null,"Step 3:\nCreate custom flavors with resources:VGPU=1."),(0,i.kt)("p",null,"Each flavor can be tied to a specific MIG profile depending on the resource\nisolation required."),(0,i.kt)("h2",{id:"use-cases"},"Use Cases"),(0,i.kt)("p",null,"MIG provides predictable resource partitioning and is well-suited for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Multi-tenant AI inference platforms"),(0,i.kt)("li",{parentName:"ul"},"Isolated training environments"),(0,i.kt)("li",{parentName:"ul"},"Batch inferencing with fixed latency requirements"),(0,i.kt)("li",{parentName:"ul"},"CI/CD testing of AI models in parallel")),(0,i.kt)("p",null,"SR-IOV complements MIG by allowing full-device access or additional partitioning\nmechanisms when MIG is unavailable or unnecessary."),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"After setting up MIG, the next step involves integrating these GPU instances\nwith OpenStack Nova and launching virtual machines equipped with virtual GPUs.\nThat will be covered in the next article."),(0,i.kt)("p",null,"OpenMetal environments support both SR-IOV and MIG configurations, enabling\norganizations to deploy secure, scalable AI workloads on fully dedicated GPU hardware."))}u.isMDXComponent=!0}}]);