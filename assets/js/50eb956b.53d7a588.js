"use strict";(self.webpackChunkopenmetal_docs=self.webpackChunkopenmetal_docs||[]).push([[6386],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),g=a,m=d["".concat(s,".").concat(g)]||d[g]||c[g]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},75970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={slug:"/private-ai/engineering-notes/preparing-nodes",description:"Learn how to configure bare metal nodes for NVIDIA A100 GPUs, including BIOS settings, kernel parameters, and PCI passthrough for GPU virtualization.",sidebar_position:1},o="Preparing Bare Metal Nodes for A100 GPU Workloads",l={unversionedId:"private-ai/engineering-notes/preparing-nodes",id:"private-ai/engineering-notes/preparing-nodes",title:"Preparing Bare Metal Nodes for A100 GPU Workloads",description:"Learn how to configure bare metal nodes for NVIDIA A100 GPUs, including BIOS settings, kernel parameters, and PCI passthrough for GPU virtualization.",source:"@site/docs/private-ai/engineering-notes/preparing-nodes.md",sourceDirName:"private-ai/engineering-notes",slug:"/private-ai/engineering-notes/preparing-nodes",permalink:"/docs/manuals/private-ai/engineering-notes/preparing-nodes",draft:!1,editUrl:"https://github.com/openmetalio/openmetal-docs/blob/main/docs/private-ai/engineering-notes/preparing-nodes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/private-ai/engineering-notes/preparing-nodes",description:"Learn how to configure bare metal nodes for NVIDIA A100 GPUs, including BIOS settings, kernel parameters, and PCI passthrough for GPU virtualization.",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Engineering Notes: Deploying A100 GPUs with MIG in OpenStack",permalink:"/docs/manuals/private-ai/engineering-notes/"},next:{title:"NVIDIA Driver Installation and Verification for A100 GPUs",permalink:"/docs/manuals/private-ai/engineering-notes/nvidia-driver-installation"}},s={},p=[{value:"Kernel and System Requirements",id:"kernel-and-system-requirements",level:2},{value:"PCI Passthrough and SR-IOV Enablement",id:"pci-passthrough-and-sr-iov-enablement",level:2},{value:"BIOS Configuration for Virtualization",id:"bios-configuration-for-virtualization",level:2},{value:"Operating System Preparation",id:"operating-system-preparation",level:2},{value:"Verifying PCIe Topology and GPU Recognition",id:"verifying-pcie-topology-and-gpu-recognition",level:2},{value:"Next Steps",id:"next-steps",level:2}],u={toc:p};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"preparing-bare-metal-nodes-for-a100-gpu-workloads"},"Preparing Bare Metal Nodes for A100 GPU Workloads"),(0,a.kt)("p",null,"Deploying NVIDIA A100 GPUs in a private cloud environment requires careful\npreparation at the node level. Proper configuration ensures the system can fully\nleverage the capabilities of the hardware while enabling advanced features such\nas virtualization and multi-instance GPU partitioning. This article outlines the\nsteps required to prepare a bare metal node for A100 GPU workloads."),(0,a.kt)("h2",{id:"kernel-and-system-requirements"},"Kernel and System Requirements"),(0,a.kt)("p",null,"For compatibility with the A100 GPU and related technologies like SR-IOV and MIG,\nthe host system must meet specific kernel and BIOS requirements. OpenMetal\nrecommends using a Linux kernel version ",(0,a.kt)("inlineCode",{parentName:"p"},"5.4 or higher"),". This ensures adequate\nsupport for GPU pass-through, I/O virtualization, and the necessary PCIe features."),(0,a.kt)("p",null,"At the kernel level, enable the following parameters for optimal operation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt kvm.ignore_msrs=1"\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"intel_iommu=on")," flag activates the IOMMU, allowing the system to manage\ndevice isolation and virtualization. The ",(0,a.kt)("inlineCode",{parentName:"p"},"iommu=pt")," option ensures performance\nis not degraded by unnecessary address translations. For AMD systems, replace\nthe IOMMU option accordingly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'GRUB_CMDLINE_LINUX_DEFAULT="quiet amd_iommu=on iommu=pt kvm.ignore_msrs=1"\n')),(0,a.kt)("p",null,"After modifying the grub configuration, apply the changes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"sudo update-grub\n")),(0,a.kt)("p",null,"Reboot the system to ensure the new parameters are loaded."),(0,a.kt)("h2",{id:"pci-passthrough-and-sr-iov-enablement"},"PCI Passthrough and SR-IOV Enablement"),(0,a.kt)("p",null,"SR-IOV (Single Root I/O Virtualization) is essential for deploying virtual GPU\n(vGPU) instances. Enable the necessary PCIe parameters to allow the GPU to\npresent multiple virtual functions (VFs):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"echo 1 > /sys/bus/pci/devices/0000:81:00.0/sriov_numvfs\n")),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"0000:81:00.0")," with the PCI address of the target GPU. The number of\nvirtual functions available depends on the GPU model and configuration."),(0,a.kt)("p",null,"Use the following command to validate the presence of the GPU and confirm\nSR-IOV support:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"lspci -nn | grep -i nvidia\n")),(0,a.kt)("h2",{id:"bios-configuration-for-virtualization"},"BIOS Configuration for Virtualization"),(0,a.kt)("p",null,"Access the system BIOS or UEFI firmware and enable the following settings:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Intel VT-x")," (or AMD-V)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"VT-d")," (or AMD IOMMU)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"SR-IOV")," Support"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Above 4G Decoding"))),(0,a.kt)("p",null,"These settings allow the hardware to support virtualization, large\nmemory mappings, and multiple PCI devices\u2014a requirement for multi-GPU\nworkloads and partitioning."),(0,a.kt)("h2",{id:"operating-system-preparation"},"Operating System Preparation"),(0,a.kt)("p",null,"Update the system and install basic tools required for NVIDIA driver installation\nand GPU management:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt update\nsudo apt install -y build-essential dkms pciutils\n")),(0,a.kt)("p",null,"Ensure that secure boot is disabled if kernel module signing is not\nconfigured, as the NVIDIA driver installation requires building and\nloading kernel modules."),(0,a.kt)("h2",{id:"verifying-pcie-topology-and-gpu-recognition"},"Verifying PCIe Topology and GPU Recognition"),(0,a.kt)("p",null,"Use the lspci command to verify that the GPU is detected and mapped correctly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"lspci -nn | grep -i nvidia\n")),(0,a.kt)("p",null,"For detailed PCIe hierarchy and bandwidth validation, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"lspci -tv\n")),(0,a.kt)("p",null,"This helps confirm the GPU is connected to a suitable PCIe slot providing the\nrequired bandwidth for compute workloads."),(0,a.kt)("h2",{id:"next-steps"},"Next Steps"),(0,a.kt)("p",null,"With the node configured, the next phase involves installing the NVIDIA driver\nand setting up the environment for vGPU or MIG operation. Proper installation\nof the NVIDIA software stack is critical for managing the A100 GPU and enabling\nadvanced features like multi-instance partitioning."),(0,a.kt)("p",null,"OpenMetal provides private clouds built to support GPU-based workloads. These\nenvironments ensure dedicated hardware access, predictable performance, and\nisolation for AI/ML and high-performance computing tasks."))}d.isMDXComponent=!0}}]);