"use strict";(self.webpackChunkopenmetal_docs=self.webpackChunkopenmetal_docs||[]).push([[9918],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||a;return t?i.createElement(g,l(l({ref:n},d),{},{components:t})):i.createElement(g,l({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<a;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},97228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=t(87462),r=(t(67294),t(3905));const a={slug:"/private-ai/engineering-notes/nvidia-driver-installation",description:"Step-by-step guide to installing and validating NVIDIA GPU drivers for A100 cards, including compatibility checks and persistent mode setup.",sidebar_position:2},l="NVIDIA Driver Installation and Verification for A100 GPUs",o={unversionedId:"private-ai/engineering-notes/driver-install",id:"private-ai/engineering-notes/driver-install",title:"NVIDIA Driver Installation and Verification for A100 GPUs",description:"Step-by-step guide to installing and validating NVIDIA GPU drivers for A100 cards, including compatibility checks and persistent mode setup.",source:"@site/docs/private-ai/engineering-notes/driver-install.md",sourceDirName:"private-ai/engineering-notes",slug:"/private-ai/engineering-notes/nvidia-driver-installation",permalink:"/docs/manuals/private-ai/engineering-notes/nvidia-driver-installation",draft:!1,editUrl:"https://github.com/openmetalio/openmetal-docs/blob/main/docs/private-ai/engineering-notes/driver-install.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/private-ai/engineering-notes/nvidia-driver-installation",description:"Step-by-step guide to installing and validating NVIDIA GPU drivers for A100 cards, including compatibility checks and persistent mode setup.",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Preparing Bare Metal Nodes for A100 GPU Workloads",permalink:"/docs/manuals/private-ai/engineering-notes/preparing-nodes"},next:{title:"SR-IOV and Multi-Instance GPU (MIG) Setup for A100 in Private Cloud",permalink:"/docs/manuals/private-ai/engineering-notes/sr-iov-and-mig"}},s={},p=[{value:"Downloading the NVIDIA Driver",id:"downloading-the-nvidia-driver",level:2},{value:"Preparing the System for Installation",id:"preparing-the-system-for-installation",level:2},{value:"Installing the NVIDIA Driver",id:"installing-the-nvidia-driver",level:2},{value:"Validating the Driver and GPU Status",id:"validating-the-driver-and-gpu-status",level:2},{value:"Verifying PCIe Performance",id:"verifying-pcie-performance",level:2},{value:"Enabling Persistent Mode (Optional)",id:"enabling-persistent-mode-optional",level:2},{value:"Next Steps",id:"next-steps",level:2}],d={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nvidia-driver-installation-and-verification-for-a100-gpus"},"NVIDIA Driver Installation and Verification for A100 GPUs"),(0,r.kt)("p",null,"The NVIDIA A100 GPU requires installation of the correct driver stack to\nenable compute workloads, virtualization, and advanced features such as\nMulti-Instance GPU (MIG). This article outlines the driver installation process,\nalong with key steps to verify operational readiness in a private cloud environment."),(0,r.kt)("h2",{id:"downloading-the-nvidia-driver"},"Downloading the NVIDIA Driver"),(0,r.kt)("p",null,"Obtain the latest stable production driver that supports the A100 GPU from the\nofficial NVIDIA website or your software repository. Ensure that the driver\nversion matches the kernel and CUDA toolkit requirements of your environment."),(0,r.kt)("p",null,"For bare metal installations, OpenMetal recommends downloading the .run installer\npackage for maximum control:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wget https://us.download.nvidia.com/tesla/<VERSION>/NVIDIA-Linux-x86_64-<VERSION>.run\n")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"<VERSION>")," with the specific driver release number required for your deployment."),(0,r.kt)("h2",{id:"preparing-the-system-for-installation"},"Preparing the System for Installation"),(0,r.kt)("p",null,"Before running the installer:"),(0,r.kt)("p",null,"Stop the display manager if running a GUI environment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo systemctl stop gdm\n")),(0,r.kt)("p",null,"Blacklist the nouveau driver to prevent conflicts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo "blacklist nouveau" | sudo tee -a /etc/modprobe.d/blacklist-nouveau.conf\nsudo update-initramfs -u\n')),(0,r.kt)("p",null,"Reboot the system to apply changes."),(0,r.kt)("p",null,"Ensure that kernel headers and development packages are installed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt install -y build-essential dkms linux-headers-$(uname -r)\n")),(0,r.kt)("h2",{id:"installing-the-nvidia-driver"},"Installing the NVIDIA Driver"),(0,r.kt)("p",null,"Run the installer in text mode to begin installation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"chmod +x NVIDIA-Linux-x86_64-<VERSION>.run\nsudo ./NVIDIA-Linux-x86_64-<VERSION>.run --silent\n")),(0,r.kt)("p",null,"Options during installation:"),(0,r.kt)("p",null,"Allow the installer to compile the kernel module."),(0,r.kt)("p",null,'Select "yes" to install the 32-bit compatibility libraries if required by your applications.'),(0,r.kt)("p",null,"Skip driver signing unless Secure Boot is enabled and configured."),(0,r.kt)("p",null,"After installation, verify that the NVIDIA kernel module is loaded:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"lsmod | grep nvidia\n")),(0,r.kt)("h2",{id:"validating-the-driver-and-gpu-status"},"Validating the Driver and GPU Status"),(0,r.kt)("p",null,"The primary validation tool is nvidia-smi, which provides real-time information\nabout GPU status and driver installation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"nvidia-smi\n")),(0,r.kt)("p",null,"The output should display:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Driver version"),(0,r.kt)("li",{parentName:"ul"},"GPU model (A100)"),(0,r.kt)("li",{parentName:"ul"},"PCIe bus ID"),(0,r.kt)("li",{parentName:"ul"},"Memory usage"),(0,r.kt)("li",{parentName:"ul"},"Compute processes (if active)")),(0,r.kt)("p",null,"Example output snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 535.104.12    Driver Version: 535.104.12    CUDA Version: 12.2   |\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n|  0   A100-PCIE-40GB     On    | 00000000:81:00.0 Off |                    0 |\n+-----------------------------------------------------------------------------+\n")),(0,r.kt)("p",null,"Use the following command to check for available Multi-Instance GPU profiles if\nplanning to configure MIG:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"nvidia-smi mig -lgip\n")),(0,r.kt)("h2",{id:"verifying-pcie-performance"},"Verifying PCIe Performance"),(0,r.kt)("p",null,"Confirm the GPU is linked at the correct PCIe generation and width to avoid\nperformance bottlenecks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo nvidia-smi topo --matrix\n")),(0,r.kt)("p",null,"This output provides insight into interconnect bandwidth, which is critical for\nhigh-throughput AI/ML workloads."),(0,r.kt)("h2",{id:"enabling-persistent-mode-optional"},"Enabling Persistent Mode (Optional)"),(0,r.kt)("p",null,"For environments where GPU power cycling is undesired, enable persistence mode\nto keep the GPU initialized:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"nvidia-smi -pm 1\n")),(0,r.kt)("p",null,"Persistence mode is recommended for systems running continuous or long-duration workloads."),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("p",null,"With the driver installed and verified, the system is ready to support A100\nworkloads. The next phase involves configuring SR-IOV and Multi-Instance GPU (MIG)\nfeatures for fine-grained resource sharing and workload isolation."),(0,r.kt)("p",null,"OpenMetal's private cloud platforms are built to support full GPU virtualization,\nallowing customers to run AI/ML workloads with dedicated hardware performance and\npredictable resource availability."))}u.isMDXComponent=!0}}]);