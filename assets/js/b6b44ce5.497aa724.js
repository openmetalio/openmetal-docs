"use strict";(self.webpackChunkopenmetal_docs=self.webpackChunkopenmetal_docs||[]).push([[2021],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),g=i,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||r;return t?a.createElement(m,s(s({ref:n},p),{},{components:t})):a.createElement(m,s({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=g;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},85758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=t(87462),i=(t(67294),t(3905));const r={slug:"/private-ai/engineering-notes/configuring-mig-and-vms-openstack",description:"Learn how to configure MIG profiles and launch virtual machines in OpenStack with GPU-backed resources using mediated devices.",sidebar_position:4},s="Configuring MIG Profiles and Launching VMs with OpenStack",o={unversionedId:"private-ai/engineering-notes/configuring-mig-and-vms-openstack",id:"private-ai/engineering-notes/configuring-mig-and-vms-openstack",title:"Configuring MIG Profiles and Launching VMs with OpenStack",description:"Learn how to configure MIG profiles and launch virtual machines in OpenStack with GPU-backed resources using mediated devices.",source:"@site/docs/private-ai/engineering-notes/configuring-mig-and-vms-openstack.md",sourceDirName:"private-ai/engineering-notes",slug:"/private-ai/engineering-notes/configuring-mig-and-vms-openstack",permalink:"/docs/manuals/private-ai/engineering-notes/configuring-mig-and-vms-openstack",draft:!1,editUrl:"https://github.com/openmetalio/openmetal-docs/blob/main/docs/private-ai/engineering-notes/configuring-mig-and-vms-openstack.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"/private-ai/engineering-notes/configuring-mig-and-vms-openstack",description:"Learn how to configure MIG profiles and launch virtual machines in OpenStack with GPU-backed resources using mediated devices.",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"SR-IOV and Multi-Instance GPU (MIG) Setup for A100 in Private Cloud",permalink:"/docs/manuals/private-ai/engineering-notes/sr-iov-and-mig"},next:{title:"Installing and Managing NVIDIA GRID Drivers for Virtual GPU (vGPU) Deployments",permalink:"/docs/manuals/private-ai/engineering-notes/install-grid-driver-vgpu"}},l={},c=[{value:"Creating MIG Profiles",id:"creating-mig-profiles",level:2},{value:"Mapping MIG Devices for OpenStack",id:"mapping-mig-devices-for-openstack",level:2},{value:"Defining Flavors for GPU-Backed VMs",id:"defining-flavors-for-gpu-backed-vms",level:2},{value:"Launching a VM with a MIG-Backed VGPU",id:"launching-a-vm-with-a-mig-backed-vgpu",level:2},{value:"Managing MIG Devices",id:"managing-mig-devices",level:2},{value:"Operational Notes",id:"operational-notes",level:2},{value:"Next Steps",id:"next-steps",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuring-mig-profiles-and-launching-vms-with-openstack"},"Configuring MIG Profiles and Launching VMs with OpenStack"),(0,i.kt)("p",null,"Once MIG mode is enabled on an NVIDIA A100 GPU and instances are created, the\nnext step is to integrate those GPU instances into an OpenStack environment.\nThis allows virtual machines to access specific GPU partitions with hardware-level\nisolation. This article outlines the steps to configure MIG profiles and deploy VMs\nwith virtual GPUs in OpenStack Nova."),(0,i.kt)("h2",{id:"creating-mig-profiles"},"Creating MIG Profiles"),(0,i.kt)("p",null,"Each MIG profile defines a specific slice of GPU memory and compute resources. On\nan A100 40GB GPU, a typical profile might be ",(0,i.kt)("inlineCode",{parentName:"p"},"1g.5gb"),", which offers one-seventh of\nthe compute and 5GB of memory."),(0,i.kt)("p",null,"To create MIG instances:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nvidia-smi mig -cgi 19,19,19 -C\n")),(0,i.kt)("p",null,"This command creates three instances of profile ID 19 (i.e., three 1g.5gb instances).\nTo list available profiles and their IDs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nvidia-smi mig -lgip\n")),(0,i.kt)("p",null,"After instance creation, confirm their presence:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nvidia-smi mig -lgi\n")),(0,i.kt)("p",null,"Each GPU Instance (GI) includes a Compute Instance (CI), and both are required to\nexecute workloads. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"-lci")," flag to list compute instances and confirm their\nallocation."),(0,i.kt)("h2",{id:"mapping-mig-devices-for-openstack"},"Mapping MIG Devices for OpenStack"),(0,i.kt)("p",null,"OpenStack treats MIG instances as mediated devices (mdevs). To expose them to Nova:"),(0,i.kt)("p",null,"Update ",(0,i.kt)("inlineCode",{parentName:"p"},"nova.conf"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"[devices]\nenabled_mdev_types = nvidia-476\n")),(0,i.kt)("p",null,"Restart Nova Compute:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl restart nova-compute\n")),(0,i.kt)("p",null,"Confirm mdev types are detected:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openstack resource provider list\n")),(0,i.kt)("p",null,"Verify VGPU availability:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openstack allocation candidate list --resource VGPU=1\n")),(0,i.kt)("p",null,"This output should reflect the MIG-backed resources available to Nova schedulers."),(0,i.kt)("h2",{id:"defining-flavors-for-gpu-backed-vms"},"Defining Flavors for GPU-Backed VMs"),(0,i.kt)("p",null,"Each VM flavor in OpenStack can include GPU traits for resource matching. For\nexample, to create a flavor that requests a single virtual GPU:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openstack flavor create \\\n  --ram 8192 \\\n  --disk 40 \\\n  --vcpus 4 \\\n  --property resources:VGPU=1 \\\n  gpu.small\n")),(0,i.kt)("p",null,"If you want to target a specific MIG profile, additional custom traits can be\nregistered and used with ",(0,i.kt)("inlineCode",{parentName:"p"},"traits:")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"aggregate_instance_extra_specs"),"."),(0,i.kt)("h2",{id:"launching-a-vm-with-a-mig-backed-vgpu"},"Launching a VM with a MIG-Backed VGPU"),(0,i.kt)("p",null,"With flavors and scheduling rules in place, deploy a VM that utilizes one of the\navailable MIG-backed GPU slices:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openstack server create \\\n  --flavor gpu.small \\\n  --image <image-id> \\\n  --network <network-id> \\\n  --key-name <keypair> \\\n  gpu-vm-01\n")),(0,i.kt)("p",null,"Inside the guest VM, install the ",(0,i.kt)("strong",{parentName:"p"},"NVIDIA GRID guest driver"),", which is required\nfor vGPU device recognition. After installation, validate with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nvidia-smi\n")),(0,i.kt)("p",null,"The output will show the assigned MIG device and its available memory and compute\ncapacity."),(0,i.kt)("h2",{id:"managing-mig-devices"},"Managing MIG Devices"),(0,i.kt)("p",null,"MIG instances can be destroyed and recreated dynamically:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nvidia-smi mig -dci\nsudo nvidia-smi mig -dgi\n")),(0,i.kt)("p",null,"Keep in mind that MIG devices are ",(0,i.kt)("strong",{parentName:"p"},"not persistent across system reboots")," unless\nrecreated automatically. Use tooling such as ",(0,i.kt)("inlineCode",{parentName:"p"},"mig-parted")," or a systemd service to\nmanage reinitialization on boot."),(0,i.kt)("h2",{id:"operational-notes"},"Operational Notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Isolation"),": MIG provides hardware-level memory and compute isolation. This ensures\npredictable performance across tenant workloads.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Flexibility"),": You can mix different MIG profiles on a single GPU to balance\nperformance and density.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Security"),": Each MIG instance functions as a discrete device, reducing the\nrisk of\ncross-tenant interference."))),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"The next article will focus on ",(0,i.kt)("strong",{parentName:"p"},"Installing and Managing NVIDIA GRID Drivers")," inside\nvirtual machines and preparing the guest operating system to make full use of the\nallocated GPU resources."),(0,i.kt)("p",null,"OpenMetal\u2019s infrastructure is designed to support these advanced virtualization\nfeatures, enabling organizations to run GPU-powered workloads with full control\nand without vendor lock-in."))}u.isMDXComponent=!0}}]);